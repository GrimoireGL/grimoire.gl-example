@Pass{
@Disable(BLEND)
@Disable(CULL_FACE)
@Disable(DEPTH_TEST)

@ExposeMacro(int,reflectCount,REFLECT_COUNT,3)
@ExposeMacro(int,iteration,ITERATION,128)
 precision highp float;
// precision highp int;
#ifdef VS
  attribute vec3 position;
  void main(){
    gl_Position = vec4(position,1);
  }
#endif

#ifdef FS
  @{default:"-3.0"}
  uniform float fovyDepth;

  @{default:"n(1,1,1)"}
  uniform vec3 lightDir;

  @{default:"45"}
  uniform float fovy;

  uniform float _time;

  uniform vec2 _viewportSize;

  const float Epsilon = 0.002;
  const float OFFSET = 0.01;

  struct Ray{
    vec3 origin;
    vec3 direction;
  };

  vec4 minVec4(vec4 a, vec4 b) {
    return (a.a < b.a) ? a : b;
  }

  vec3 trans(vec3 p){
    return mod(p, vec3(3.)) - vec3(2.0);
  }

  vec3 check(vec3 p){
    float val = mod(p.x + p.z,2.);
    if(val > 1.0){
      return vec3(1,0,1);
    }else{
      return vec3(1,1,1);
    }
  }

  float sphereDist(vec3 p,float r){
    return length(trans(p)) - r;
  }

  float boxDist(vec3 p,vec3 b){
    return length(max(abs(p)-b,0.));
  }

  float distFuncFloor(vec3 p){
    return dot(p, vec3(0.0, 1.0, 0.0)) + 1.0;
  }

  vec3 hsv2rgb(vec3 c) {
  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

  float distanceFunc(vec3 p){
    return min(sphereDist(p,1.),distFuncFloor(p));
  }

  float getShadow(vec3 ro, vec3 rd){
    float h = 0.0;
    float c = 0.001;
    float r = 1.0;
    float shadowCoef = 0.5;
    for(float t = 0.0; t < 50.0; t++){
        h = distanceFunc(ro + rd * c);
        if(h < 0.001){
            return shadowCoef;
        }
        r = min(r, h * 16.0 / c);
        c += h;
    }
    return 1.0 - shadowCoef + r * shadowCoef;
}

  vec4 albedo(vec3 p){
    return minVec4(vec4(hsv2rgb(vec3((p.z + p.y + p.x + _time/10000.)/9.,1.0,1.0)),sphereDist(p,1.)),vec4(check(p),distFuncFloor(p)));
  }

  vec3 getNormal(vec3 p){
    float d = Epsilon;
    return normalize(vec3(
        distanceFunc(p + vec3(  d, 0.0, 0.0)) - distanceFunc(p + vec3( -d, 0.0, 0.0)),
        distanceFunc(p + vec3(0.0,   d, 0.0)) - distanceFunc(p + vec3(0.0,  -d, 0.0)),
        distanceFunc(p + vec3(0.0, 0.0,   d)) - distanceFunc(p + vec3(0.0, 0.0,  -d))
    ));
}

  vec3 getRayColor(vec3 origin,vec3 ray,out vec3 p,out vec3 normal,out bool hit){
    // marching loop
    float distance = 0.0;
    float rLen = 0.0;
    vec3  rPos = origin;
    for(int i = 0; i < ITERATION; i++){
        distance = distanceFunc(rPos);
        rLen += distance;
        rPos = origin + ray * rLen;
    }
    p = rPos;
    // hit check
    if(abs(distance) < Epsilon){
        normal = getNormal(rPos);
        vec3 col = mix(albedo(rPos).rgb,vec3(1,1,1),0.);
        float specular = pow(clamp(dot(reflect(lightDir, normal), ray), 0.0, 1.0), 10.0);
        float diff = clamp(dot(lightDir, normal), 0.1, 1.0);
        float shadow = getShadow(p + normal * OFFSET, lightDir);
        hit = true;
        return vec3((vec3(0.3)+diff + specular) * col * shadow);
    }else{
        hit = false;
        return vec3(1);
    }
  }

  void main(){
    // fragment position
    vec2 p = (gl_FragCoord.xy * 2.0 - _viewportSize) / min(_viewportSize.x, _viewportSize.y);

    // camera
    vec3 cPos = vec3(0. ,  0.,  _time/1000.);
    float targetDepth = 1.0;
    float fov2 =  fovy * 0.5 * PI / 180.0;
    // ray
    vec3 ray = normalize(vec3(sin(fov2) * p.x, sin(fov2) * p.y, -cos(fov2)));
    vec3 q = vec3(0),normal = vec3(0);
    bool hit = false;
    float alpha = 1.0;
    vec3 color = vec3(0);
    for(int i = 0; i < REFLECT_COUNT; i ++){
      vec3 newColor = getRayColor(cPos,ray,q,normal,hit);
      if (!hit) {
        if(i == 0){
          color = vec3(1);
        }
        break;
      }
      ray = normalize(reflect(ray, normal));
      cPos = q + normal * OFFSET;
      color += alpha * newColor;
      alpha -= 0.2;
    }
    gl_FragColor = vec4(color,1);
  }
#endif
}
